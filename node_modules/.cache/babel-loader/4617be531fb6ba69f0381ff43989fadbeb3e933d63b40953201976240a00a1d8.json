{"ast":null,"code":"// Actualiza tu authService.js para incluir encabezados adecuados y manejo de errores\n\nimport axios from 'axios';\nimport API_BASE_URL from '../config/api';\n\n// Configura axios con encabezados predeterminados\nconst axiosInstance = axios.create({\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\nconst AuthService = {\n  login: async (email, password) => {\n    try {\n      const response = await axiosInstance.post(`${API_BASE_URL}/login`, JSON.stringify({\n        email,\n        password\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      // Agregar más información de depuración\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n      }\n      throw error;\n    }\n  },\n  register: async (username, email, password) => {\n    try {\n      const response = await axiosInstance.post(`${API_BASE_URL}/register`, JSON.stringify({\n        username,\n        email,\n        password\n      }), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Register error:', error);\n      // Agregar más información de depuración\n      if (error.response) {\n        console.error('Response data:', error.response.data);\n        console.error('Response status:', error.response.status);\n      }\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    if (!userStr) return null;\n    try {\n      return JSON.parse(userStr);\n    } catch (e) {\n      return null;\n    }\n  },\n  isAuthenticated: () => {\n    const user = AuthService.getCurrentUser();\n    return !!user && !!user.token;\n  },\n  authHeader: () => {\n    const user = AuthService.getCurrentUser();\n    if (user && user.token) {\n      return {\n        Authorization: `Bearer ${user.token}`\n      };\n    } else {\n      return {};\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_BASE_URL","axiosInstance","create","headers","AuthService","login","email","password","response","post","JSON","stringify","data","token","localStorage","setItem","error","console","status","register","username","logout","removeItem","getCurrentUser","userStr","getItem","parse","e","isAuthenticated","user","authHeader","Authorization"],"sources":["C:/Practicas/taskmanage/frontend/src/services/authService.js"],"sourcesContent":["// Actualiza tu authService.js para incluir encabezados adecuados y manejo de errores\r\n\r\nimport axios from 'axios';\r\nimport API_BASE_URL from '../config/api';\r\n\r\n// Configura axios con encabezados predeterminados\r\nconst axiosInstance = axios.create({\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n  }\r\n});\r\n\r\nconst AuthService = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await axiosInstance.post(`${API_BASE_URL}/login`, \r\n        JSON.stringify({ email, password }),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      // Agregar más información de depuración\r\n      if (error.response) {\r\n        console.error('Response data:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  register: async (username, email, password) => {\r\n    try {\r\n      const response = await axiosInstance.post(`${API_BASE_URL}/register`, \r\n        JSON.stringify({ username, email, password }),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Register error:', error);\r\n      // Agregar más información de depuración\r\n      if (error.response) {\r\n        console.error('Response data:', error.response.data);\r\n        console.error('Response status:', error.response.status);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const userStr = localStorage.getItem('user');\r\n    if (!userStr) return null;\r\n    try {\r\n      return JSON.parse(userStr);\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const user = AuthService.getCurrentUser();\r\n    return !!user && !!user.token;\r\n  },\r\n\r\n  authHeader: () => {\r\n    const user = AuthService.getCurrentUser();\r\n    if (user && user.token) {\r\n      return { Authorization: `Bearer ${user.token}` };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}