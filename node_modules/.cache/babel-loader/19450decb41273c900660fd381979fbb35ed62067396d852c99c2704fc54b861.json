{"ast":null,"code":"// src/services/authService.js\nimport api from './interceptors';\nconst AuthService = {\n  login: async credentials => {\n    const response = await api.post('/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('userId', response.data.userId);\n      localStorage.setItem('email', response.data.email);\n      localStorage.setItem('username', response.data.username);\n      localStorage.setItem('role', response.data.role || 'user');\n      console.log('Login successful, data stored:', {\n        token: !!response.data.token,\n        userId: response.data.userId\n      });\n    }\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/register', userData);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('email');\n    localStorage.removeItem('username');\n    localStorage.removeItem('role');\n    console.log('Logout completed, storage cleared');\n  },\n  getCurrentUser: () => {\n    return {\n      token: localStorage.getItem('token'),\n      userId: localStorage.getItem('userId'),\n      email: localStorage.getItem('email'),\n      username: localStorage.getItem('username'),\n      role: localStorage.getItem('role')\n    };\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    // Verificamos que el token exista y no esté vacío\n    return token !== null && token !== undefined && token !== '';\n  },\n  isAdmin: () => {\n    return localStorage.getItem('role') === 'admin';\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["api","AuthService","login","credentials","response","post","data","token","localStorage","setItem","userId","email","username","role","console","log","register","userData","logout","removeItem","getCurrentUser","getItem","isAuthenticated","undefined","isAdmin"],"sources":["C:/Practicas/taskmanage/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport api from './interceptors';\r\n\r\nconst AuthService = {\r\n  login: async (credentials) => {\r\n    const response = await api.post('/login', credentials);\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('userId', response.data.userId);\r\n      localStorage.setItem('email', response.data.email);\r\n      localStorage.setItem('username', response.data.username);\r\n      localStorage.setItem('role', response.data.role || 'user');\r\n      console.log('Login successful, data stored:', {\r\n        token: !!response.data.token,\r\n        userId: response.data.userId\r\n      });\r\n    }\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData) => {\r\n    const response = await api.post('/register', userData);\r\n    return response.data;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('email');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('role');\r\n    console.log('Logout completed, storage cleared');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    return {\r\n      token: localStorage.getItem('token'),\r\n      userId: localStorage.getItem('userId'),\r\n      email: localStorage.getItem('email'),\r\n      username: localStorage.getItem('username'),\r\n      role: localStorage.getItem('role'),\r\n    };\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('token');\r\n    // Verificamos que el token exista y no esté vacío\r\n    return token !== null && token !== undefined && token !== '';\r\n  },\r\n\r\n  isAdmin: () => {\r\n    return localStorage.getItem('role') === 'admin';\r\n  }\r\n};\r\n\r\nexport default AuthService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,gBAAgB;AAEhC,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,QAAQ,EAAEF,WAAW,CAAC;IACtD,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEL,QAAQ,CAACE,IAAI,CAACI,MAAM,CAAC;MACpDF,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACK,KAAK,CAAC;MAClDH,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEL,QAAQ,CAACE,IAAI,CAACM,QAAQ,CAAC;MACxDJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,QAAQ,CAACE,IAAI,CAACO,IAAI,IAAI,MAAM,CAAC;MAC1DC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAC5CR,KAAK,EAAE,CAAC,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK;QAC5BG,MAAM,EAAEN,QAAQ,CAACE,IAAI,CAACI;MACxB,CAAC,CAAC;IACJ;IACA,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDU,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,WAAW,EAAEY,QAAQ,CAAC;IACtD,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDY,MAAM,EAAEA,CAAA,KAAM;IACZV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCX,YAAY,CAACW,UAAU,CAAC,QAAQ,CAAC;IACjCX,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCX,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;IACnCX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;IAC/BL,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;EAClD,CAAC;EAEDK,cAAc,EAAEA,CAAA,KAAM;IACpB,OAAO;MACLb,KAAK,EAAEC,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;MACpCX,MAAM,EAAEF,YAAY,CAACa,OAAO,CAAC,QAAQ,CAAC;MACtCV,KAAK,EAAEH,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;MACpCT,QAAQ,EAAEJ,YAAY,CAACa,OAAO,CAAC,UAAU,CAAC;MAC1CR,IAAI,EAAEL,YAAY,CAACa,OAAO,CAAC,MAAM;IACnC,CAAC;EACH,CAAC;EAEDC,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMf,KAAK,GAAGC,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;IAC3C;IACA,OAAOd,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKgB,SAAS,IAAIhB,KAAK,KAAK,EAAE;EAC9D,CAAC;EAEDiB,OAAO,EAAEA,CAAA,KAAM;IACb,OAAOhB,YAAY,CAACa,OAAO,CAAC,MAAM,CAAC,KAAK,OAAO;EACjD;AACF,CAAC;AAED,eAAepB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}