{"ast":null,"code":"var _jsxFileName = \"C:\\\\Practicas\\\\taskmanage\\\\frontend\\\\src\\\\Pages\\\\Dashboard\\\\Dashboardpage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Dashboard/DashboardPage.jsx\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { FloatButton, Modal, Form, Button, message, Tabs, Spin, Typography } from \"antd\";\nimport { PlusOutlined, ReloadOutlined } from \"@ant-design/icons\";\nimport TaskService from \"../../services/taskService\";\nimport GroupService from \"../../services/groupService\";\nimport UserService from \"../../services/userService\";\nimport AuthService from \"../../services/authService\";\nimport Kanban from \"../../components/Kanban/Kanban\";\nimport GroupCard from \"../../components/GroupCard/GroupCard\";\nimport TaskForm from \"../../components/TaskForm/TaskForm\";\nimport DashboardStats from \"./components/DashboardStats\";\nimport ViewSelector from \"./components/ViewSelector\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst DashboardPage = () => {\n  _s();\n  // State for data\n  const [tasks, setTasks] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentUserId, setCurrentUserId] = useState(null);\n\n  // State for task filtering\n  const [currentView, setCurrentView] = useState('all');\n\n  // State for modals\n  const [isTaskModalVisible, setIsTaskModalVisible] = useState(false);\n  const [isEditTaskModalVisible, setIsEditTaskModalVisible] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n\n  // Form instances\n  const [taskForm] = Form.useForm();\n  const [editTaskForm] = Form.useForm();\n\n  // Stats\n  const [stats, setStats] = useState({\n    totalTasks: 0,\n    completedTasks: 0,\n    pendingTasks: 0,\n    groups: 0\n  });\n\n  // Fetch data from API\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const user = AuthService.getCurrentUser();\n      if (user && user.userId) {\n        setCurrentUserId(user.userId);\n\n        // Fetch tasks\n        const tasksData = await TaskService.getUserTasks(user.userId);\n        setTasks(Array.isArray(tasksData) ? tasksData : []);\n\n        // Fetch groups\n        const groupsData = await GroupService.getUserGroups(user.userId);\n        // Aseguramos que groups sea un array v치lido y filtramos elementos null/undefined\n        setGroups(Array.isArray(groupsData) ? groupsData.filter(g => g) : []);\n\n        // Fetch users for dropdown selections\n        const usersData = await UserService.getAllUsers();\n        setUsers(Array.isArray(usersData) ? usersData : []);\n\n        // Calculate stats\n        setStats({\n          totalTasks: tasksData.length,\n          completedTasks: tasksData.filter(task => task.status === 'Done').length,\n          pendingTasks: tasksData.filter(task => task.status !== 'Done').length,\n          groups: groupsData.length\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      message.error(\"Error al cargar los datos. Por favor, intenta nuevamente.\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Solo cargamos los datos cuando se monta el componente\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Modal handlers\n  const showTaskModal = () => {\n    taskForm.resetFields();\n    setIsTaskModalVisible(true);\n  };\n  const showEditTaskModal = task => {\n    if (task) {\n      setSelectedTask(task);\n      editTaskForm.resetFields();\n\n      // Solo cargar el estado para edici칩n\n      editTaskForm.setFieldsValue({\n        status: task.status || 'In Progress'\n      });\n      setIsEditTaskModalVisible(true);\n    }\n  };\n  const handleTaskCancel = () => {\n    taskForm.resetFields();\n    setIsTaskModalVisible(false);\n  };\n  const handleEditTaskCancel = () => {\n    editTaskForm.resetFields();\n    setIsEditTaskModalVisible(false);\n    setSelectedTask(null);\n  };\n\n  // Form submit handlers\n  const handleTaskSubmit = async values => {\n    try {\n      await TaskService.createPersonalTask(values);\n      message.success(\"Tarea personal creada exitosamente\");\n      fetchData();\n      setIsTaskModalVisible(false);\n      taskForm.resetFields();\n    } catch (error) {\n      console.error(\"Error creating personal task:\", error);\n      message.error(\"Error al crear la tarea personal. Por favor, intenta nuevamente.\");\n    }\n  };\n  const handleEditTaskSubmit = async values => {\n    try {\n      if (!selectedTask) {\n        message.error(\"No hay tarea seleccionada para editar\");\n        return;\n      }\n\n      // Solo actualizamos el estado de la tarea\n      await TaskService.updateTaskStatus(selectedTask._id, values.status);\n      message.success(\"Estado de la tarea actualizado exitosamente\");\n      fetchData();\n      setIsEditTaskModalVisible(false);\n      editTaskForm.resetFields();\n      setSelectedTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      message.error(\"Error al actualizar la tarea. Por favor, intenta nuevamente.\");\n    }\n  };\n\n  // Filter tasks based on current view\n  const getFilteredTasks = () => {\n    if (currentView === 'all') return tasks;\n    if (currentView === 'personal') return tasks.filter(task => !task.groupId);\n    return tasks.filter(task => task.groupId === currentView);\n  };\n\n  // Render group cards\n  const renderGroupCards = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '16px'\n      },\n      children: groups && groups.length > 0 ?\n      // Filtrar grupos nulos o indefinidos antes de mapear\n      groups.filter(group => group && typeof group === 'object').map(group => /*#__PURE__*/_jsxDEV(GroupCard, {\n        group: group,\n        onCreateGroupTask: () => {} // Los usuarios normales no pueden crear tareas de grupo\n        ,\n        onViewGroupTasks: groupId => setCurrentView(groupId),\n        onEditGroup: () => {} // Los usuarios normales no pueden editar grupos\n      }, group._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '20px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          type: \"secondary\",\n          children: \"No tienes grupos actualmente.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Configuraci칩n de las pesta침as\n  const tabItems = [{\n    key: 'tasks',\n    label: 'Mis Tareas',\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ViewSelector, {\n        currentView: currentView,\n        setCurrentView: setCurrentView,\n        groups: groups || []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Kanban, {\n        tasks: getFilteredTasks(),\n        groups: groups || [],\n        onTaskUpdated: fetchData,\n        showEditModal: showEditTaskModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, {\n    key: 'groups',\n    label: 'Mis Grupos',\n    children: renderGroupCards()\n  }];\n\n  // Main content\n  const renderContent = () => {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          padding: 40\n        },\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 86\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DashboardStats, {\n        stats: stats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        defaultActiveKey: \"tasks\",\n        items: tabItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        marginBottom: 24,\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 2,\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(ReloadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }, this),\n        onClick: fetchData,\n        loading: loading,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), renderContent(), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Crear Nueva Tarea Personal\",\n      open: isTaskModalVisible,\n      onCancel: handleTaskCancel,\n      footer: null,\n      destroyOnClose: true,\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        form: taskForm,\n        onFinish: handleTaskSubmit,\n        isGroupTask: false,\n        editMode: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Cambiar Estado de Tarea\",\n      open: isEditTaskModalVisible,\n      onCancel: handleEditTaskCancel,\n      footer: null,\n      destroyOnClose: true,\n      children: /*#__PURE__*/_jsxDEV(TaskForm, {\n        form: editTaskForm,\n        onFinish: handleEditTaskSubmit,\n        initialValues: selectedTask,\n        buttonText: \"Actualizar Estado\",\n        editMode: true // Indicar que estamos en modo edici칩n para mostrar solo el campo de estado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatButton, {\n      icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 15\n      }, this),\n      type: \"primary\",\n      onClick: showTaskModal,\n      tooltip: \"Nueva Tarea Personal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"FosFNRWVAQwst9bu0YiBN6RMUjA=\", false, function () {\n  return [Form.useForm, Form.useForm];\n});\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","FloatButton","Modal","Form","Button","message","Tabs","Spin","Typography","PlusOutlined","ReloadOutlined","TaskService","GroupService","UserService","AuthService","Kanban","GroupCard","TaskForm","DashboardStats","ViewSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","Title","Text","DashboardPage","_s","tasks","setTasks","groups","setGroups","users","setUsers","loading","setLoading","currentUserId","setCurrentUserId","currentView","setCurrentView","isTaskModalVisible","setIsTaskModalVisible","isEditTaskModalVisible","setIsEditTaskModalVisible","selectedTask","setSelectedTask","taskForm","useForm","editTaskForm","stats","setStats","totalTasks","completedTasks","pendingTasks","fetchData","user","getCurrentUser","userId","tasksData","getUserTasks","Array","isArray","groupsData","getUserGroups","filter","g","usersData","getAllUsers","length","task","status","error","console","showTaskModal","resetFields","showEditTaskModal","setFieldsValue","handleTaskCancel","handleEditTaskCancel","handleTaskSubmit","values","createPersonalTask","success","handleEditTaskSubmit","updateTaskStatus","_id","getFilteredTasks","groupId","renderGroupCards","style","display","flexWrap","gap","children","group","map","onCreateGroupTask","onViewGroupTasks","onEditGroup","fileName","_jsxFileName","lineNumber","columnNumber","padding","type","tabItems","key","label","onTaskUpdated","showEditModal","renderContent","justifyContent","size","defaultActiveKey","items","marginBottom","alignItems","level","icon","onClick","title","open","onCancel","footer","destroyOnClose","form","onFinish","isGroupTask","editMode","initialValues","buttonText","tooltip","_c","$RefreshReg$"],"sources":["C:/Practicas/taskmanage/frontend/src/Pages/Dashboard/Dashboardpage.jsx"],"sourcesContent":["// src/pages/Dashboard/DashboardPage.jsx\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { \r\n  FloatButton, \r\n  Modal, \r\n  Form, \r\n  Button, \r\n  message, \r\n  Tabs, \r\n  Spin, \r\n  Typography\r\n} from \"antd\";\r\nimport { \r\n  PlusOutlined, \r\n  ReloadOutlined\r\n} from \"@ant-design/icons\";\r\nimport TaskService from \"../../services/taskService\";\r\nimport GroupService from \"../../services/groupService\";\r\nimport UserService from \"../../services/userService\";\r\nimport AuthService from \"../../services/authService\";\r\nimport Kanban from \"../../components/Kanban/Kanban\";\r\nimport GroupCard from \"../../components/GroupCard/GroupCard\";\r\nimport TaskForm from \"../../components/TaskForm/TaskForm\";\r\nimport DashboardStats from \"./components/DashboardStats\";\r\nimport ViewSelector from \"./components/ViewSelector\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst DashboardPage = () => {\r\n  // State for data\r\n  const [tasks, setTasks] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentUserId, setCurrentUserId] = useState(null);\r\n  \r\n  // State for task filtering\r\n  const [currentView, setCurrentView] = useState('all');\r\n  \r\n  // State for modals\r\n  const [isTaskModalVisible, setIsTaskModalVisible] = useState(false);\r\n  const [isEditTaskModalVisible, setIsEditTaskModalVisible] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  \r\n  // Form instances\r\n  const [taskForm] = Form.useForm();\r\n  const [editTaskForm] = Form.useForm();\r\n\r\n  // Stats\r\n  const [stats, setStats] = useState({\r\n    totalTasks: 0,\r\n    completedTasks: 0,\r\n    pendingTasks: 0,\r\n    groups: 0\r\n  });\r\n\r\n  // Fetch data from API\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const user = AuthService.getCurrentUser();\r\n      if (user && user.userId) {\r\n        setCurrentUserId(user.userId);\r\n        \r\n        // Fetch tasks\r\n        const tasksData = await TaskService.getUserTasks(user.userId);\r\n        setTasks(Array.isArray(tasksData) ? tasksData : []);\r\n        \r\n        // Fetch groups\r\n        const groupsData = await GroupService.getUserGroups(user.userId);\r\n        // Aseguramos que groups sea un array v치lido y filtramos elementos null/undefined\r\n        setGroups(Array.isArray(groupsData) ? groupsData.filter(g => g) : []);\r\n        \r\n        // Fetch users for dropdown selections\r\n        const usersData = await UserService.getAllUsers();\r\n        setUsers(Array.isArray(usersData) ? usersData : []);\r\n        \r\n        // Calculate stats\r\n        setStats({\r\n          totalTasks: tasksData.length,\r\n          completedTasks: tasksData.filter(task => task.status === 'Done').length,\r\n          pendingTasks: tasksData.filter(task => task.status !== 'Done').length,\r\n          groups: groupsData.length\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      message.error(\"Error al cargar los datos. Por favor, intenta nuevamente.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Solo cargamos los datos cuando se monta el componente\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Modal handlers\r\n  const showTaskModal = () => {\r\n    taskForm.resetFields();\r\n    setIsTaskModalVisible(true);\r\n  };\r\n\r\n  const showEditTaskModal = (task) => {\r\n    if (task) {\r\n      setSelectedTask(task);\r\n      editTaskForm.resetFields();\r\n      \r\n      // Solo cargar el estado para edici칩n\r\n      editTaskForm.setFieldsValue({\r\n        status: task.status || 'In Progress'\r\n      });\r\n      \r\n      setIsEditTaskModalVisible(true);\r\n    }\r\n  };\r\n\r\n  const handleTaskCancel = () => {\r\n    taskForm.resetFields();\r\n    setIsTaskModalVisible(false);\r\n  };\r\n\r\n  const handleEditTaskCancel = () => {\r\n    editTaskForm.resetFields();\r\n    setIsEditTaskModalVisible(false);\r\n    setSelectedTask(null);\r\n  };\r\n\r\n  // Form submit handlers\r\n  const handleTaskSubmit = async (values) => {\r\n    try {\r\n      await TaskService.createPersonalTask(values);\r\n      message.success(\"Tarea personal creada exitosamente\");\r\n      fetchData();\r\n      setIsTaskModalVisible(false);\r\n      taskForm.resetFields();\r\n    } catch (error) {\r\n      console.error(\"Error creating personal task:\", error);\r\n      message.error(\"Error al crear la tarea personal. Por favor, intenta nuevamente.\");\r\n    }\r\n  };\r\n\r\n  const handleEditTaskSubmit = async (values) => {\r\n    try {\r\n      if (!selectedTask) {\r\n        message.error(\"No hay tarea seleccionada para editar\");\r\n        return;\r\n      }\r\n      \r\n      // Solo actualizamos el estado de la tarea\r\n      await TaskService.updateTaskStatus(selectedTask._id, values.status);\r\n      message.success(\"Estado de la tarea actualizado exitosamente\");\r\n      fetchData();\r\n      setIsEditTaskModalVisible(false);\r\n      editTaskForm.resetFields();\r\n      setSelectedTask(null);\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n      message.error(\"Error al actualizar la tarea. Por favor, intenta nuevamente.\");\r\n    }\r\n  };\r\n\r\n  // Filter tasks based on current view\r\n  const getFilteredTasks = () => {\r\n    if (currentView === 'all') return tasks;\r\n    if (currentView === 'personal') return tasks.filter(task => !task.groupId);\r\n    return tasks.filter(task => task.groupId === currentView);\r\n  };\r\n  \r\n  // Render group cards\r\n  const renderGroupCards = () => {\r\n    return (\r\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px' }}>\r\n        {groups && groups.length > 0 ? (\r\n          // Filtrar grupos nulos o indefinidos antes de mapear\r\n          groups.filter(group => group && typeof group === 'object').map(group => (\r\n            <GroupCard \r\n              key={group._id} \r\n              group={group} \r\n              onCreateGroupTask={() => {}} // Los usuarios normales no pueden crear tareas de grupo\r\n              onViewGroupTasks={(groupId) => setCurrentView(groupId)}\r\n              onEditGroup={() => {}} // Los usuarios normales no pueden editar grupos\r\n            />\r\n          ))\r\n        ) : (\r\n          <div style={{ padding: '20px 0' }}>\r\n            <Text type=\"secondary\">No tienes grupos actualmente.</Text>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Configuraci칩n de las pesta침as\r\n  const tabItems = [\r\n    {\r\n      key: 'tasks',\r\n      label: 'Mis Tareas',\r\n      children: (\r\n        <>\r\n          <ViewSelector \r\n            currentView={currentView} \r\n            setCurrentView={setCurrentView} \r\n            groups={groups || []} \r\n          />\r\n          <Kanban \r\n            tasks={getFilteredTasks()} \r\n            groups={groups || []} \r\n            onTaskUpdated={fetchData}\r\n            showEditModal={showEditTaskModal}\r\n          />\r\n        </>\r\n      )\r\n    },\r\n    {\r\n      key: 'groups',\r\n      label: 'Mis Grupos',\r\n      children: renderGroupCards()\r\n    }\r\n  ];\r\n\r\n  // Main content\r\n  const renderContent = () => {\r\n    if (loading) {\r\n      return <div style={{ display: 'flex', justifyContent: 'center', padding: 40 }}><Spin size=\"large\" /></div>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <DashboardStats stats={stats} />\r\n        <Tabs defaultActiveKey=\"tasks\" items={tabItems} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 24, alignItems: 'center' }}>\r\n        <Title level={2}>Dashboard</Title>\r\n        <Button \r\n          type=\"primary\" \r\n          icon={<ReloadOutlined />} \r\n          onClick={fetchData}\r\n          loading={loading}\r\n        >\r\n          Actualizar\r\n        </Button>\r\n      </div>\r\n\r\n      {renderContent()}\r\n\r\n      {/* Create Personal Task Modal */}\r\n      <Modal \r\n        title=\"Crear Nueva Tarea Personal\" \r\n        open={isTaskModalVisible} \r\n        onCancel={handleTaskCancel} \r\n        footer={null}\r\n        destroyOnClose\r\n      >\r\n        <TaskForm \r\n          form={taskForm} \r\n          onFinish={handleTaskSubmit} \r\n          isGroupTask={false}\r\n          editMode={false}\r\n        />\r\n      </Modal>\r\n\r\n      {/* Edit Task Modal - Solo para cambiar estado */}\r\n      <Modal \r\n        title=\"Cambiar Estado de Tarea\" \r\n        open={isEditTaskModalVisible} \r\n        onCancel={handleEditTaskCancel} \r\n        footer={null}\r\n        destroyOnClose\r\n      >\r\n        <TaskForm \r\n          form={editTaskForm} \r\n          onFinish={handleEditTaskSubmit} \r\n          initialValues={selectedTask}\r\n          buttonText=\"Actualizar Estado\"\r\n          editMode={true} // Indicar que estamos en modo edici칩n para mostrar solo el campo de estado\r\n        />\r\n      </Modal>\r\n\r\n      {/* Floating Action Button - Solo para crear tareas personales */}\r\n      <FloatButton \r\n        icon={<PlusOutlined />} \r\n        type=\"primary\" \r\n        onClick={showTaskModal}\r\n        tooltip=\"Nueva Tarea Personal\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}