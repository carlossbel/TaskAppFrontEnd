{"ast":null,"code":"// src/services/userService.js\nimport api from './interceptors';\nconst UserService = {\n  // Get all users\n  getAllUsers: async () => {\n    const response = await api.get('/users');\n    return response.data;\n  },\n  // Get user by ID\n  getUserById: async userId => {\n    const response = await api.get(`/users/${userId}`);\n    return response.data;\n  },\n  // Update user\n  updateUser: async (userId, userData) => {\n    const response = await api.put(`/users/${userId}`, userData);\n    return response.data;\n  },\n  // Update user role (admin only)\n  updateUserRole: async (userId, role) => {\n    const response = await api.put(`/users/${userId}/role`, {\n      role\n    });\n    return response.data;\n  },\n  // Delete user (admin only)\n  deleteUser: async userId => {\n    const response = await api.delete(`/users/${userId}`);\n    return response.data;\n  },\n  // Create admin user (for initial setup)\n  createAdminUser: async userData => {\n    const response = await api.post('/users/admin', userData);\n    return response.data;\n  }\n};\nexport default UserService;","map":{"version":3,"names":["api","UserService","getAllUsers","response","get","data","getUserById","userId","updateUser","userData","put","updateUserRole","role","deleteUser","delete","createAdminUser","post"],"sources":["C:/Practicas/taskmanage/frontend/src/services/userService.js"],"sourcesContent":["// src/services/userService.js\r\nimport api from './interceptors';\r\n\r\nconst UserService = {\r\n  // Get all users\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/users');\r\n    return response.data;\r\n  },\r\n\r\n  // Get user by ID\r\n  getUserById: async (userId) => {\r\n    const response = await api.get(`/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user\r\n  updateUser: async (userId, userData) => {\r\n    const response = await api.put(`/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user role (admin only)\r\n  updateUserRole: async (userId, role) => {\r\n    const response = await api.put(`/users/${userId}/role`, { role });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user (admin only)\r\n  deleteUser: async (userId) => {\r\n    const response = await api.delete(`/users/${userId}`);\r\n    return response.data;\r\n  },\r\n  \r\n  // Create admin user (for initial setup)\r\n  createAdminUser: async (userData) => {\r\n    const response = await api.post('/users/admin', userData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default UserService;"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,gBAAgB;AAEhC,MAAMC,WAAW,GAAG;EAClB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAUG,MAAM,EAAE,CAAC;IAClD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAG,UAAU,EAAE,MAAAA,CAAOD,MAAM,EAAEE,QAAQ,KAAK;IACtC,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,UAAUH,MAAM,EAAE,EAAEE,QAAQ,CAAC;IAC5D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,cAAc,EAAE,MAAAA,CAAOJ,MAAM,EAAEK,IAAI,KAAK;IACtC,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,UAAUH,MAAM,OAAO,EAAE;MAAEK;IAAK,CAAC,CAAC;IACjE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,UAAU,EAAE,MAAON,MAAM,IAAK;IAC5B,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACc,MAAM,CAAC,UAAUP,MAAM,EAAE,CAAC;IACrD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAU,eAAe,EAAE,MAAON,QAAQ,IAAK;IACnC,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAEP,QAAQ,CAAC;IACzD,OAAON,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,eAAeJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}